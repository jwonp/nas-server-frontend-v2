# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: nas-server-frontend-v2 CI

on:
  push:
    branches: [ "main" ]

jobs:
  
  build:
    runs-on: [self-hosted, example]

    strategy:
      matrix:
        node-version: [21.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - name: continuous integration CI build caching
      uses: actions/cache@v3
      with:
         # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
        path: |
          ~/.npm
          ${{ github.workspace }}/.next/cache
        # Generate a new cache whenever packages or source files change.
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
        # If source files changed but packages didn't, rebuild from a prior cache.
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
        # cache: 'npm'
    - name: create env file
      run: |
        touch .env
        echo NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }} >> .env
        echo NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }} >> .env
        echo NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }} >> .env
        echo NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }} >> .env
        echo NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} >> .env
        echo GOOGLE_APPLICATION_CREDENTIALS=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }} >> .env
        echo ACCESS_KEY_ID=${{ secrets.ACCESS_KEY_ID }} >> .env
        echo SECRET_ACCESS_KEY=${{ secrets.SECRET_ACCESS_KEY }} >> .env
        echo BUCKET_REGION=${{ secrets.BUCKET_REGION }} >> .env
        echo BUCKET_NAME=${{ secrets.BUCKET_NAME }} >> .env
        echo BUCKET_HOSTNAME=${{ secrets.BUCKET_HOSTNAME }} >> .env
        echo ECCRYPTO_PUBLIC_KEY=${{ secrets.ECCRYPTO_PUBLIC_KEY }} >> .env
        echo FIREBASE_CONFIG_API_KEY=${{ secrets.FIREBASE_CONFIG_API_KEY }} >> .env
        echo FIREBASE_CONFIG_AUTH_DOMAIN=${{ secrets.FIREBASE_CONFIG_AUTH_DOMAIN }} >> .env
        echo FIREBASE_CONFIG_PROJECT_ID=${{ secrets.FIREBASE_CONFIG_PROJECT_ID }} >> .env
        echo FIREBASE_CONFIG_STORAGE_BUCKET=${{ secrets.FIREBASE_CONFIG_STORAGE_BUCKET }} >> .env
        echo FIREBASE_CONFIG_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_CONFIG_MESSAGING_SENDER_ID }} >> .env
        echo FIREBASE_CONFIG_APP_ID=${{ secrets.FIREBASE_CONFIG_APP_ID }} >> .env
        echo FIREBASE_CONFIG_MEASUREMENT_ID=${{ secrets.FIREBASE_CONFIG_MEASUREMENT_ID }} >> .env
        echo JWT_SIGN_KEY=${{ secrets.JWT_SIGN_KEY }} >> .env
        echo BACKEND_ENDPOINT=${{ secrets.BACKEND_ENDPOINT }} >> .env
        echo FRONTEND_ENDPOINT=${{ secrets.FRONTEND_ENDPOINT }} >> .env
        echo NEXT_SHARP_PATH=${{ secrets.NEXT_SHARP_PATH }} >> .env
        
    - run: pm2 kill
    - run: rm -rf node_modules
    - run: yarn install --immutable --immutable-cache --check-cache
    - run: yarn build
    - run: pm2 start npm --name "nas-server-frontend-v2" -- start

